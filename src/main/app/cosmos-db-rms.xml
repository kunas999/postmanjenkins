<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <flow name="cosmos-db-rms-flow">
        <object-to-string-transformer doc:name="Object to String"/>
        <async doc:name="startAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "start", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId":"", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "rms data to perform insert/update/delete operations" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <enricher target="#[flowVars.record]" doc:name="Message Enricher">
            <processor-chain doc:name="Processor Chain">
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload resource="classpath:dwl/vas-data-forFindBy.dwl"/>

                </dw:transform-message>
                <invoke name="cosmosFind" object-ref="cosmosRmsUtil" method="findBy" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" doc:name="cosmosFind"/>
            </processor-chain>
        </enricher>

        <logger message="findBySize :: #[flowVars.record.size()]" level="INFO" doc:name="Log-dataSize" />
        <choice doc:name="checkDBOperation">
            <when expression="#[dw('payload.InsertDeleteCode==&quot;D&quot;')]">
                <logger message="Invoking delete flow" level="INFO" doc:name="Log-DelFlow" />
                <flow-ref name="cosmos-db-rms-delete-flow" doc:name="cosmos-db-rms-delete-flow"/>
            </when>
            <when expression="#[dw('payload.InsertDeleteCode==&quot;I&quot;') &amp;&amp; (flowVars.record.size()==1)]">
                <logger message="Calling Update Flow" level="INFO" doc:name="Log-Update flow" />
                <flow-ref name="cosmos-db-rms-update-flow" doc:name="cosmos-db-rms-update-flow"/>
            </when>
            <when expression="#[dw('payload.InsertDeleteCode==&quot;I&quot;') &amp;&amp; (flowVars.record.size()==0)]">
                <logger message="Invoking insert flow" level="INFO" doc:name="Log-insert flow" />

                <flow-ref name="cosmos-db-rms-insert-flow" doc:name="cosmos-db-rms-insert-flow"/>
            </when>
            
            <otherwise>
                <logger message="No operation" level="INFO" doc:name="Logger" />
                <set-payload value="{    &quot;success&quot;:false,    &quot;message&quot;:&quot;Not a valid input&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>
        <async doc:name="endAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "start", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId": "", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "inserted/updated/deleted the record" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Default excception handler catch all" level="ERROR" doc:name="Logger"/>
            <expression-component doc:name="Expression"><![CDATA[flowVars.exceptionMessage =  exception.cause != null ? exception.cause.message : exception.message;
]]></expression-component>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload resource="classpath:dwl/rms-vas-exception-message.dwl"/>
            </dw:transform-message>
            <async doc:name="Async">
			  <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTP", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "error", //It is used to identify the step for logging start/ end
   "version":"1.0", //version
   "transactionId": "", //Unique messageId ID eg: customer email address
   "transactionType": "", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "DefaultException",
   //"msgpayload": flowVars.commonError //if we want to override message payload set the msgpayload field 
   "additionalKeys": {
    	"rootCauseMessage":flowVars.exceptionMessage default null
      	    }
}]]></dw:set-variable>
            </dw:transform-message>		
			<flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework" />
		</async>
        </catch-exception-strategy>

    </flow>
    <flow name="cosmos-db-rms-delete-flow">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload resource="classpath:dwl/vas-data-for-delete.dwl"/>

        </dw:transform-message>
        <logger message="Request for Delete :: #[payload:java.lang.String]" level="DEBUG" doc:name="Log-DelRequest" category="com.hertz.mule.rms.vas"/>
        <invoke method="delete" object-ref="cosmosRmsDelUtil"   doc:name="invokeRMSDel" name="invokeRMSDel" methodArgumentTypes="java.lang.String" methodArguments="#[payload]"/>
        <logger level="DEBUG" doc:name="Log-DelResponse" message="Response after Delete :: #[payload:java.lang.String]" category="com.hertz.mule.rms.vas"/>
        <set-payload value="{
   &quot;success&quot;:true,
   &quot;message&quot;:&quot;OK&quot;
}" mimeType="application/json" doc:name="SetDelResponse"/>

		
    </flow>

    <flow name="cosmos-db-rms-insert-flow">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload resource="classpath:dwl/vas-data-for-insert.dwl"/>

        </dw:transform-message>
        <logger message="Request for Insert :: #[payload:java.lang.String]" level="DEBUG" doc:name="Log-InsetRequest" category="com.hertz.mule.rms.vas"/>
        <invoke name="Rms" object-ref="cosmosRmsUtil" method="save" methodArguments="#[payload]" methodArgumentTypes="java.lang.String" doc:name="Rms"/>

    	<logger level="DEBUG"  doc:name="Log-InsertResponse" message="Response after Insert :: #[payload:java.lang.String]" category="com.hertz.mule.rms.vas"/>
    	<set-payload value="{
   &quot;success&quot;:true,
   &quot;message&quot;:&quot;OK&quot;
}" mimeType="application/json" doc:name="SetInsertResponse"/>


    </flow>
    <flow name="cosmos-db-rms-update-flow">
    <dw:transform-message doc:name="Transform Message">
            <dw:set-payload resource="classpath:dwl/vas-data-for-update.dwl"/>

        </dw:transform-message>
        <logger message="Request for Update :: #[payload:java.lang.String]" level="DEBUG" doc:name="Log-UpdateRequest" category="com.hertz.mule.rms.vas"/>

    	<invoke method="save" object-ref="cosmosRmsUtil" methodArguments="#[payload]" methodArgumentTypes="java.lang.String" doc:name="updateRms" name="updateRms"/>
        <logger message="Response after update :: #[payload:java.lang.String]" level="DEBUG" doc:name="Log-UpdateResponse" category="com.hertz.mule.rms.vas"/>
        <set-payload value="{
   &quot;success&quot;:true,
   &quot;message&quot;:&quot;OK&quot;
}" mimeType="application/json" doc:name="SetUpdateResponse"/>



    </flow>
</mule>
