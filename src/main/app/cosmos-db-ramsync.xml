<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">

    <flow name="retrieveCarClassFlow">
        <async doc:name="startAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "start", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId": inboundProperties."http.query.params".sippCode default "sippCodeLookUp", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "ramSippLookup" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <dw:transform-message doc:name="queryParamToDB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	("SIPP": inboundProperties."http.query.params".sippCode when inboundProperties."http.query.params".sippCode != null otherwise ""),
	("Country": inboundProperties."http.query.params".countryCode when inboundProperties."http.query.params".countryCode != null otherwise "")
}]]></dw:set-payload>
        </dw:transform-message>

        <logger message="Payload to Query ==&gt; #[payload]" level="DEBUG" doc:name="Logger"/>				
		<invoke method="findBy" object-ref="cosmosRamCarClassUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" name="invokeSippCollection"/>
        <logger message="Response from CosmosDB: #[payload]" level="DEBUG" doc:name="Logger"/>
        <dw:transform-message doc:name="transformResponse" metadata:id="fd706803-48cd-4043-9f58-96ed646d8707">
            <dw:input-payload doc:sample="src/main/resources/CosmosDBResponse_sample.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	carClass: payload[0].Car_Class
}]]></dw:set-payload>
        </dw:transform-message>         
    </flow>
    
    <flow name="retrieveLocationFlow">
        <async doc:name="startAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "start", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId": inboundProperties."http.query.params".oagCode default "locCodeLookUp", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "ramLocLookup" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <dw:transform-message doc:name="queryParamToDB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	("EXTENDED_OAG": inboundProperties."http.query.params".oagCode when inboundProperties."http.query.params".oagCode != null otherwise "")
}]]></dw:set-payload>
        </dw:transform-message>

        <logger message="Payload to Query ==&gt; #[payload]" level="DEBUG" doc:name="Logger"/>				
		<invoke method="findBy" object-ref="cosmosLocationsUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" name="invokeLocationCollection"/>
        <logger message="Response from CosmosDB: #[payload]" level="DEBUG" doc:name="Logger"/>
        <dw:transform-message doc:name="transformResponse" metadata:id="fd706803-48cd-4043-9f58-96ed646d8707">
            <dw:input-payload doc:sample="src/main/resources/CosmosDBResponse_sample.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	locCode: payload[0].RAM_LOCATION_ID
}]]></dw:set-payload>
        </dw:transform-message>    
    </flow>
    
    <flow name="retrieveChargeTypeFlow">
        <async doc:name="startAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "start", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId": inboundProperties."http.query.params".sovosCode default "gddChargeTypeLookUp", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "ramChargeTypeLookup" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <dw:transform-message doc:name="queryParamToDB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	("OTAValue": inboundProperties."http.query.params".otaValue when inboundProperties."http.query.params".otaValue != null otherwise "")
}]]></dw:set-payload>
        </dw:transform-message>

        <logger message="Payload to Query ==&gt; #[payload]" level="DEBUG" doc:name="Logger"/>				
		<invoke method="findBy" object-ref="cosmosRateTypeUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" name="invokeRmsVasCollection"/>
        <logger message="Response from CosmosDB: #[payload]" level="DEBUG" doc:name="Logger"/>
        <dw:transform-message doc:name="transformResponse" metadata:id="fd706803-48cd-4043-9f58-96ed646d8707">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	gddChargeTypeCode: payload[0].GDDRateIdentification
}]]></dw:set-payload>
        </dw:transform-message>       
    </flow>
</mule>
