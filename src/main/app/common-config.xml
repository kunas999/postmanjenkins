<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw" 
xmlns:secure-property-placeholder="http://www.mulesoft.org/schema/mule/secure-property-placeholder" xmlns:context="http://www.springframework.org/schema/context" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/secure-property-placeholder http://www.mulesoft.org/schema/mule/secure-property-placeholder/current/mule-secure-property-placeholder.xsd
http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd">
    
   <secure-property-placeholder:config name="Secure_Property_Placeholder-template" encryptionAlgorithm="Blowfish" key="${property.key}" location="classpath:env/template-hertz-api-led-${mule.env}.properties,env/common-utils-${mule.env}.properties" doc:name="Secure Property Placeholder"  ignoreResourceNotFound="true" ignoreUnresolvablePlaceholders="true"/>
 
 	   <!--
    This template gives an easy way to build mulesoft api in a mandatory format at Hertz.  
    This Anypoint Template is a REST API implemented using APIkit and RAML definition. The template demonstrates the basic CRUD operations are implemented for Customer object. The API uses JSON as an exchange format. Included are example resources,requests and responses.
 	refer readme.md documentation for additional details 
     -->
     <!--  Below are common mule configuration files that will be imported through maven dependency -->
  	<!--<spring:beans>
        <spring:import resource="classpath:common-error.xml"/>
        <spring:import resource="classpath:common-utils.xml"/>
    </spring:beans>  -->
 
	<!--  All the mule applications will be https one-way ssl enabled -->
 
 	<http:listener-config name="api-httpListenerConfig" host="0.0.0.0" port="8092" doc:name="HTTP Listener Configuration" protocol="HTTPS">
        <tls:context>
            <tls:key-store type="jks" path="${tls.filepath}" alias="${tls.alias}" keyPassword="${tls.keyPassword}" password="${tls.password}"/>
        </tls:context>
    </http:listener-config>
    <apikit:config name="api-config" raml="api.raml" consoleEnabled="${console.enabled}" doc:name="Router" keepRamlBaseUri="${keep.raml.uri}"/>
    <api-platform-gw:api apiName="${api-autodiscovery-name}" version="${api-autodiscovery-version}" flowRef="api-main" create="true" apikitRef="api-config" doc:name="API Autodiscovery"/>
   
</mule>
