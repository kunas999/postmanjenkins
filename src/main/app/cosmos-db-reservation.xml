<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    
    <flow name="cosmos-reservation-findBy-flow">	
        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload doc:sample="data\reservations\res1.json"/>
			<dw:set-payload><![CDATA[%dw 1.0
				%output application/java
				---
				{
					("OTA_VehResRQ.vehResRQCore.vehRentalCore.pickUpLocation[0].locationCode" when inboundProperties."http.query.params".pickupLocation != null otherwise "") : (inboundProperties."http.query.params".pickupLocation when inboundProperties."http.query.params".pickupLocation != null otherwise ""),
					("OTA_VehResRQ.vehResRQCore.uniqueID[0].id" when inboundProperties."http.query.params".reservationId != null otherwise "") : (inboundProperties."http.query.params".reservationId when inboundProperties."http.query.params".reservationId != null otherwise ""),
					("OTA_VehResRQ.pos.source[0].airlineVendorID" when inboundProperties."http.query.params".airlineCode != null otherwise "") : (inboundProperties."http.query.params".airlineCode when inboundProperties."http.query.params".airlineCode != null otherwise "")
				}]]>
			</dw:set-payload>
        </dw:transform-message>				
		<invoke method="findBy" object-ref="cosmosReservationUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" doc:name="Invoke"/>		
        <logger level="INFO"  doc:name="Logger" message="#[message.payloadAs(java.lang.String)]"/>
        <!-- filter result based on role -->       
    </flow>
    
    <flow name="cosmos-reservation-findById-flow">
    	<logger level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">            
            <dw:set-payload><![CDATA[%dw 1.0
				%output application/java
				---
				{
					"id" : flowVars.id
				}]]>
			</dw:set-payload>
        </dw:transform-message>				
		<invoke method="findBy" object-ref="cosmosReservationUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" doc:name="Invoke"/>		
        <logger level="INFO"  doc:name="Logger" message="#[message.payloadAs(java.lang.String)]"/>
        <!-- filter result based on role -->
    </flow>
    
    <flow name="cosmos-reservation-save-flow">
    	<object-to-string-transformer doc:name="Object to String"/>    	
		<invoke method="save" object-ref="cosmosReservationUtil" methodArguments="#[payload]" methodArgumentTypes="java.lang.String" doc:name="Invoke"/>		        
        <!-- filter result based on role -->
        <dw:transform-message doc:name="Transform Message2">
            <dw:input-payload doc:sample="data\reservations\response\response.json"/>
            <dw:set-payload><![CDATA[%dw 1.0                        
				%output application/java
				---
				{
					location: "/reservation/" ++ payload.id
				}]]>
			</dw:set-payload>
        </dw:transform-message>	
		<logger level="INFO"  doc:name="Logger" message="#[payload]"/>
		<logger level="INFO"  doc:name="Logger" message="ID: #[payload['location']]"/>   
		<set-property propertyName="location" value=" #[payload['location']]" doc:name="Property" />
		<set-payload value="#[null]" doc:name="Set Payload"/>				           
    </flow>        
    
    <flow name="cosmos-reservation-udpate-flow">
    	
    	<!--  get the ID from incoming path and merge with incoming JSON -->
        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload doc:sample="data\reservations\res1.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
				%output application/json
				---				
				{ id: inboundProperties."http.uri.params".id when inboundProperties."http.uri.params".id != null otherwise "" }					
				++
				payload
				]]>
			</dw:set-payload>
        </dw:transform-message>   	
    	
    	<object-to-string-transformer doc:name="Object to String"/>
    	
    	<logger message="#[payload]" level="INFO" doc:name="Logger"/>
    	
    	<!--  update the record, save does both save and update -->
    	<invoke method="save" object-ref="cosmosReservationUtil" methodArguments="#[payload]" methodArgumentTypes="java.lang.String" doc:name="Invoke"/>
    	
    	<logger message="#[payload]" level="INFO" doc:name="Logger"/>
    	    	    	    	    	    	    	    	
        <dw:transform-message doc:name="Transform Message2">
            <dw:input-payload doc:sample="data\reservations\response\response.json"/>
            <dw:set-variable variableName="location"><![CDATA[%dw 1.0                        
				%output application/java
				---
					"/reservation/" ++ payload.id
				]]>
			</dw:set-variable>
        </dw:transform-message>	
		<logger level="INFO"  doc:name="Logger" message="#[payload]"/>
		<logger level="INFO"  doc:name="Logger" message="ID: #[flowVars['location']]"/>   
		<set-property propertyName="location" value="#[flowVars['location']]" doc:name="Property" />
		<set-payload value="#[payload]" doc:name="Set Payload"/>
    	    	
    </flow>
    <flow name="cosmos-db-verify-vendor-flow">
        <object-to-byte-array-transformer doc:name="Object to Byte Array"/>
        <async doc:name="startAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "lookup", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId": inboundProperties."http.query.params".vendorNumber default "verifyVendor", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "verifyVendorAuthorization" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <dw:transform-message doc:name="queryParamToDB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	("CONSUMER_PRODUCT_CD": inboundProperties."http.query.params".consumerCode when inboundProperties."http.query.params".vendorNumber != null otherwise ""),
	("VND_NBR": inboundProperties."http.query.params".vendorNumber when inboundProperties."http.query.params".vendorNumber != null otherwise ""),
	("BRAND": inboundProperties."http.query.params".brand when inboundProperties."http.query.params".brand != null otherwise "ZE")
}]]></dw:set-payload>
        </dw:transform-message>

        <logger message="Payload to Query ==&gt; #[payload]" level="INFO" doc:name="Logger"/>
			
		<invoke method="findBy" object-ref="cosmosVendorUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" name="invokeVendorCollection" doc:name="Invoke"/>
        <logger message="Response from CosmosDB: #[payload.size()]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[payload.size() &gt; 0]">
                <set-payload value="#['Authorized vendor']" doc:name="validPayload"/>
            </when>
            <otherwise>
                <set-payload value="#['Not an authorized vendor']" doc:name="defaultPayload"/>
            </otherwise>
        </choice>
        <exception-strategy ref="messagingChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>

    </flow>
    
</mule>
