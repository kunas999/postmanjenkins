<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <flow name="retExtendedOagFlow">
        <async doc:name="startAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "start", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId": inboundProperties."http.query.params".oagCode default "locCodeLookUp", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "ramLocLookup" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <dw:transform-message doc:name="queryParamToDB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	("OAG": inboundProperties."http.query.params".oagCode when inboundProperties."http.query.params".oagCode != null otherwise "")
}]]></dw:set-payload>
        </dw:transform-message>

        <logger message="Payload to Query ==&gt; #[payload]" level="INFO" doc:name="Logger"/>				
		<invoke method="findBy" object-ref="cosmosLocationsUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" name="invokeLocCollectionRQ"/>
        <logger message="Response from CosmosDB: #[payload]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="transformResponse">
            <dw:input-payload doc:sample="src/main/resources/CosmosDBResponse_sample.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	extendedOag: payload[0].EXTENDED_OAG
}]]></dw:set-payload>
        </dw:transform-message>    
    </flow>
  
    <flow name="retRateTypeOtaFlow">
        <async doc:name="startAsyncLogging">
            <dw:transform-message doc:name="createauditLoggingVar">
                <dw:set-variable variableName="auditlog"><![CDATA[%dw 1.0
%output application/java
---
{
   "uuid": sessionVars.uuid default null,
   "type": "HTTPS", //Source Transport type :  WMQ, File, SFTP,HTTP,AMQ
   "flowStep": "start", //It is used to identify the step for logging start/ end
   "version":"1.0",  
   "transactionId": inboundProperties."http.query.params".oagCode default "locCodeLookUp", //Unique messageId ID eg: customer email address
   "message":"", //It is used to store the detailed descriptive text about the event or message
   "eventName": "ramLocLookup" 
}]]></dw:set-variable>
            </dw:transform-message>
            <flow-ref name="auditLoggingFramework" doc:name="auditLoggingFramework"/>
        </async>
        <dw:transform-message doc:name="queryParamToDB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	("LocationCode": payload.locationCode when payload.locationCode != null otherwise ""),
	("RateType": payload.rateType when payload.rateType != null otherwise ""),
	("OTAValue": payload.otaValue when payload.otaValue != null otherwise "")
}]]></dw:set-payload>
        </dw:transform-message>

        <logger message="Payload to Query ==&gt; #[payload]" level="INFO" doc:name="Logger"/>				
		<invoke method="findBy" object-ref="cosmosRateTypeUtil" methodArguments="#[payload]" methodArgumentTypes="java.util.Map" name="invokeVasCollectionRQ"/>
        <logger message="Response from CosmosDB: #[payload]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="transformResponse">
            <dw:input-payload doc:sample="src/main/resources/CosmosDBResponse_sample.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	gddCode: payload[0].GDDRateIdentification
}]]></dw:set-payload>
        </dw:transform-message>    
  </flow>         
</mule>
